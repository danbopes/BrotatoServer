@page "/current_run"

@using BrotatoServer.Data;
@using BrotatoServer.Hubs;
@using BrotatoServer.Models.JSON;
@using BrotatoServer.Models;
@using BrotatoServer.Utilities;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IRunRepository RunRepository
@implements IAsyncDisposable

<PageTitle>Current Run</PageTitle>

@if (IsConnected && fetched)
{
    @if (runInfo != null)
    {
        <RunDataView RunData="runInfo.RunData" />
    }
    else
    {
        <p>No current run. You can check out these latest runs</p>
        @foreach (var run in latestRuns)
        {
            var charName = run.RunData.RunData.Character.Replace("character_", "");
            <a href="runs/@run.Id">
            <div class="run-wrapper">
                <div class="image">
                    <img src="assets/items/characters/@charName/@(charName)_icon.png" />
                </div>
                <div class="title">
                        Wave @run.RunData.RunData.Wave - LV. @run.RunData.RunData.Level <br />
                        @run.RunData.RunData.Character.CharIdToNiceName()
                </div>
            </div>
            </a>
            <br />
        }
    }
}
else
{
    <p>Loading...</p>
}



@code {
    private HubConnection? hubConnection;
    private RunInformation? runInfo;
    private bool fetched;
    private List<FullRun> latestRuns;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/runsHub"))
            .Build();

        hubConnection.On<RunInformation>(nameof(IRunHub.RunUpdate), async (runInfo) =>
        {
            JS.InvokeVoidAsync("console.log", runInfo);

            if (runInfo is null)
            {
                this.latestRuns = await RunRepository.GetLatestRunsAsync(5).ToListAsync();
            }
            this.fetched = true;
            this.runInfo = runInfo;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
