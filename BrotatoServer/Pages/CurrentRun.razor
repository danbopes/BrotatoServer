@page "/current_run"

@using BrotatoServer.Hubs;
@using BrotatoServer.Models.JSON;
@using BrotatoServer.Utilities;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Current Run</PageTitle>

@if (IsConnected && fetched)
{
    @if (runInfo != null)
    {
        var charName = runInfo.RunData.Character.Replace("character_", "");
        var niceCharName = string.Join(' ', charName.Split('_').Select(word => word.UcFirst()));
        var wikiName = niceCharName.Replace(' ', '_');

        <StatContainer RunData="@runInfo.RunData" />

        <p>Character:
            <a href="https://brotato.wiki.spellsandguns.com/@wikiName" target="_blank">
                <img src="assets/items/characters/@charName/@(charName)_icon.png" />
                @niceCharName
            </a>
        </p>


        <p>Weapons:</p>
        var i = 1;
        foreach (var weapon in runInfo.RunData.Weapons)
        {
            var key = $"{i++}-{weapon}";
            <WeaponView @key="key" Id="@weapon" />
        }

        <p>Items:</p>

        i = 1;
        foreach (var item in runInfo.RunData.Items.AsEnumerable().Reverse().Where(i => i.StartsWith("item_")).GroupBy(item => item))
        {
            var count = item.Count();
            var key = $"{i++}-{item.First()}-{count}";

            <ItemView @key="key" Id="@item.First()" Count="@count" RunData="@runInfo.RunData" />
        }
    }
    else
    {
            <p>No current run :(</p>
    }
}
else
{
    <p>Loading...</p>
}



@code {
    private HubConnection? hubConnection;
    private RunInformation? runInfo;
    private string? userInput;
    private string? messageInput;
    private bool fetched;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/runsHub"))
            .Build();

        hubConnection.On<RunInformation>(nameof(IRunHub.RunUpdate), (runInfo) =>
        {
            JS.InvokeVoidAsync("console.log", runInfo);
            this.fetched = true;
            this.runInfo = runInfo;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
