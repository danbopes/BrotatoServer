@using BrotatoServer.Models.JSON

@if (Simple)
{
    if (WikiUrl is not null)
    {
        <a href="@WikiUrl" target="_blank">
            <img src="@Icon" alt="@NiceCharName"/>
        </a>
    }
    else
    {
        <img src="@Icon" alt="@NiceCharName"/>
    }
}
else
{
    <Popover Class="inventory-popup tier-0">
        <TriggerContent>
            @if (WikiUrl is not null)
            {
                <a href="@WikiUrl" target="_blank">
                    <img src="@Icon" alt="@NiceCharName"/>
                    @NiceCharName
                </a>
            }
            else
            {
                <img src="@Icon" alt="@NiceCharName"/>
                @NiceCharName
            }
        </TriggerContent>
        <PopoverContent>
            <div class="title">
                @NiceCharName
            </div>
            @EffectsHtml
        </PopoverContent>
    </Popover>
}

@code {
    [Parameter, EditorRequired] public string Character { get; set; } = null!;

    [Parameter, EditorRequired] public ItemData? CharacterData { get; set; }
    
    [CascadingParameter] public CustomData? CustomData { get; set; }

    [Parameter] public bool Simple { get; set; } = false;

    private string? WikiUrl { get; set; }
    private string NiceCharName { get; set; } = null!;
    private string CharName { get; set; } = null!;
    private string Icon { get; set; } = null!;


    protected override void OnParametersSet()
    {
        CharName = Character.Replace("character_", "");
        NiceCharName = CharacterData?.Name ?? string.Join(' ', CharName.Split('_').Select(word => word.UcFirst()));
        Icon = $"assets/items/characters/{CharName}/{CharName}_icon.png";
        
        if (CustomData?.Characters?.TryGetValue(Character, out var customData) ?? false)
        {
            Icon = "data:image/png;base64," + customData.Icon;
        }
        else
        {
            WikiUrl = "https://brotato.wiki.spellsandguns.com/" + NiceCharName.Replace(' ', '_').Replace('-', '_');
        }

        base.OnParametersSet();
    }

    public MarkupString? EffectsHtml => CharacterData?.Hover.ParseBBCodeText();
}