@using BrotatoServer.Data.Game;
@using BrotatoServer.Models.JSON;
@using Newtonsoft.Json.Linq;

<div class="stats-container">
    <h5>Primary Stats:</h5>

    <table class="stats">
        <tr class="current-level">
            <td><img src="assets/items/upgrades/upgrade_icon.png" alt="" /></td>
            <td>Current Level</td>
            <td style="text-align: right">@RunData.Level</td>
        </tr>
        
        @foreach (var statId in _primaryStats)
        {
            var stat = Assets.Stats[statId];

            var statValue = GetStat(statId);
            var valueText = statValue.ToString();
            
            if (statId == "stat_dodge")
                if (statValue > EffectsAsJson.Value<decimal>("dodge_cap"))
                    valueText += " | " + EffectsAsJson.Value<decimal>("dodge_cap");
            
            if (statId == "stat_max_hp" && EffectsAsJson.Value<decimal>("hp_cap") < 9999)
                valueText += " | " + EffectsAsJson.Value<decimal>("hp_cap");
            
            if (statId == "stat_speed" && EffectsAsJson.Value<decimal>("speed_cap") < 9999)
                valueText += " | " + EffectsAsJson.Value<decimal>("speed_cap");
            
            var statClass = statValue > 0 ? "pos" : statValue < 0 ? "neg" : "";

            <tr class="@statClass">
                <td><img src="@stat.SmallIcon.GetAssetPath()" alt="@stat.Name" /></td>
                <td>@stat.Name</td>
                <td class="stat-value">@valueText</td>
            </tr>
        }
    </table>
</div>

@code {
    [Parameter, EditorRequired] public RunData RunData { get; set; } = null!;
    private JObject EffectsAsJson { get; set; } = null!;

    private Dictionary<string, int>? Stats => RunData.Stats;

    protected override void OnParametersSet()
    {
        EffectsAsJson = JObject.FromObject(RunData.Effects);
        base.OnParametersSet();
    }

    private string[] _primaryStats = {
        "stat_max_hp", "stat_hp_regeneration", "stat_lifesteal", "stat_percent_damage", "stat_melee_damage",
        "stat_ranged_damage", "stat_elemental_damage", "stat_attack_speed", "stat_crit_chance", "stat_engineering",
        "stat_range", "stat_armor", "stat_dodge", "stat_speed", "stat_luck",
        "stat_harvesting"
    };

    private int GetStat(string statName)
    {
        // New format
        if (Stats is not null && Stats.TryGetValue(statName, out var statValue))
            return statValue;
        
        var statEffect = !EffectsAsJson.ContainsKey(statName) ? 0 : EffectsAsJson.Value<decimal>(statName);
        
        var statGain = !EffectsAsJson.ContainsKey("gain_" + statName)
            ? 1M
            : 1M + (EffectsAsJson.Value<decimal>("gain_" + statName) / 100M);

        return (int) (statEffect * statGain);
    }
}
